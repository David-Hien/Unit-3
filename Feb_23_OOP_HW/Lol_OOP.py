import random


class Champions:
    """ This class represents all characters/champions and their stats and abilities """
    def __init__(self, max_health, max_mana, ability_power, physical_power, armour):
        self.max_health = max_health
        self.current_health = max_health
        self.max_mana = max_mana
        self.current_mana = max_mana
        self.ability_power = ability_power
        self.physical_power = physical_power
        self.armour = armour

    # Methods
    def auto_attack(self):
        return f"<Damage inflicted to target> {self.physical_power}"

    def ability_attack(self):
        self.current_mana -= 100
        return f"<Damage inflicted to target> {self.ability_power}\n" \
               f"<Remaining mana> {self.current_mana}"

    def recieve_physical_damage(self):
        damage_taken = random.randint(50, 100) - self.armour
        self.current_health -= damage_taken
        return f"<Damage taken> {damage_taken}\n" \
               f"<Remaining health> {self.current_health}"

    def use_potion(self):
        self.current_health += 100
        if self.current_health > self.max_health:
            self.current_health = self.max_health

        self.current_mana += 100
        if self.current_mana > self.max_mana:
            self.current_mana = self.max_mana

        return f"<Health> regenerated by 100: {self.current_health}\n" \
               f"<Mana> regenerated by 100: {self.current_mana}"

    def __repr__(self):
        return f"<Damage inflicted to target> {self.physical_power}"


class Mages(Champions):
    """ This class specificly represents the Mages class within champions, all methods and attributes are included """
    def __init__(self, max_health, max_mana, ability_power, physical_power, armour):
        super().__init__(max_health, max_mana, ability_power, physical_power, armour)
        self.item = LudensTempest()
        self.bonus_ap = self.item.bonus_ap
        self.max_mana += self.item.bonus_mana

    # Methods
    def ability_attack(self):
        self.current_mana -= 100
        return f"<Damage inflicted to target> {self.ability_power + self.bonus_ap}\n" \
               f"<Remaining mana> {self.current_mana}"


class LudensTempest:
    """ This class represents a Mages-only item """
    def __init__(self):
        self.bonus_ap = 80
        self.bonus_mana = 600
        self.armour_penetration = 15
        self.charge = 1
        self.damage_dealt = 0

    # Methods
    def active(self):
        if self.charge == 0:
            effect = "Item on cooldown."
        else:
            self.charge -= 1
            bonus_damage_dealt = self.bonus_ap * 1.5
            self.damage_dealt += bonus_damage_dealt
            effect = f"Ludens active - bonus AOE damage to surrounding target: {bonus_damage_dealt}."

        return effect

    def recharge(self):
        self.charge += 1
        return "<Active cooldown> refreshed."

    def get_damage_dealt(self):
        return self.damage_dealt

    def get_stats(self):
        return f"<Bonus ability power> {self.bonus_ap}\n" \
               f"<Bonus mana> {self.bonus_mana}\n" \
               f"<Armour penetration> {self.armour_penetration}\n" \
               f"<Charge> {self.charge}\n" \
               f"<Damage dealt> {self.damage_dealt}"

    def __repr__(self):
        return f"<Bonus ability power> {self.bonus_ap}\n" \
               f"<Bonus mana> {self.bonus_mana}\n" \
               f"<Armour penetration> {self.armour_penetration}\n" \
               f"<Charge> {self.charge}\n" \
               f"<Damage dealt> {self.damage_dealt}"


ryze = Mages(600, 450, 80, 55, 25)
ahri = Mages(550, 400, 80, 55, 20)
vex = Mages(550, 450, 75, 55, 20)
viktor = Mages(550, 400, 85, 50, 20)

print(ryze.auto_attack(), "\n")
print(ryze.ability_attack(), "\n")
print(ryze.recieve_physical_damage(), "\n")
print(ryze.use_potion(), "\n")
print(ryze, "\n")
print(ryze.item.active(), "\n")
print(ryze.item.recharge(), "\n")
print(ryze.item.get_damage_dealt(), "\n")
print(ryze.item.get_stats(), "\n")
print(ryze.item, "\n")

print(ahri.auto_attack(), "\n")
print(ahri.ability_attack(), "\n")
print(ahri.recieve_physical_damage(), "\n")
print(ahri.use_potion(), "\n")
print(ahri, "\n")
print(ahri.item.active(), "\n")
print(ahri.item.recharge(), "\n")
print(ahri.item.get_damage_dealt(), "\n")
print(ahri.item.get_stats(), "\n")
print(ahri.item, "\n")

print(vex.auto_attack(), "\n")
print(vex.ability_attack(), "\n")
print(vex.recieve_physical_damage(), "\n")
print(vex.use_potion(), "\n")
print(vex, "\n")
print(vex.item.active(), "\n")
print(vex.item.recharge(), "\n")
print(vex.item.get_damage_dealt(), "\n")
print(vex.item.get_stats(), "\n")
print(vex.item, "\n")

print(viktor.auto_attack(), "\n")
print(viktor.ability_attack(), "\n")
print(viktor.recieve_physical_damage(), "\n")
print(viktor.use_potion(), "\n")
print(viktor, "\n")
print(viktor.item.active(), "\n")
print(viktor.item.recharge(), "\n")
print(viktor.item.get_damage_dealt(), "\n")
print(viktor.item.get_stats(), "\n")
print(viktor.item, "\n")
